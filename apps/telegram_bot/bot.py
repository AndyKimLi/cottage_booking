import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, 
    ContextTypes, CallbackQueryHandler
)
from django.conf import settings
from django.contrib.auth import get_user_model
from asgiref.sync import sync_to_async
from .models import TelegramUser
from apps.bookings.models import Booking, BookingStatus
from datetime import datetime, timedelta

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

User = get_user_model()


class CottageBookingBot:
    """Telegram –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª–∞ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö"""
    
    def __init__(self):
        self.token = getattr(settings, 'TELEGRAM_BOT_TOKEN', None)
        if not self.token:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ settings.py")
        
        self.application = Application.builder().token(self.token).build()
        self._setup_handlers()
    
    def _setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("bookings", self.bookings_command))
        self.application.add_handler(CommandHandler("subscribe", self.subscribe_command))
        self.application.add_handler(CommandHandler("unsubscribe", self.unsubscribe_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        logger.debug(f"User {user.id} ({user.first_name}) trying to access bot")
        
        # –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–µ–º –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        telegram_user = await self._register_telegram_user(user)
        if not telegram_user:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏!\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
            )
            return
        
        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º
        is_staff = await self._is_staff_member(user.id)
        logger.debug(f"Is staff check result: {is_staff}")
        
        if not is_staff:
            logger.debug(f"Access denied for user {user.id}")
            await update.message.reply_text(
                "‚ùå –î–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω!\n\n"
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞.\n"
                "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –≤–∞–º –¥–æ—Å—Ç—É–ø —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å."
            )
            return
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")],
            [InlineKeyboardButton("üìã –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", callback_data="bookings")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!\n\n"
            "ü§ñ –Ø –±–æ—Ç –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö –∫–æ—Ç—Ç–µ–¥–∂–µ–π.\n"
            "–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n"
            "‚Ä¢ üÜï –ù–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö\n"
            "‚Ä¢ üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Å—Ç–∞—Ç—É—Å–∞\n"
            "‚Ä¢ ‚ùå –û—Ç–º–µ–Ω–∞—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
ü§ñ **–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:**

/start - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
/bookings - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
/subscribe - –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/unsubscribe - –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

üì± **–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:**
‚Ä¢ –ù–æ–≤—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
‚Ä¢ –û—Ç–º–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

‚ùì **–ü–æ–¥–¥–µ—Ä–∂–∫–∞:**
–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å–∏—Å—Ç–µ–º—ã.
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        if not await self._is_staff_member(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        stats = await self._get_booking_stats()
        await update.message.reply_text(stats, parse_mode='Markdown')
    
    async def bookings_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /bookings"""
        if not await self._is_staff_member(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        bookings = await self._get_recent_bookings()
        await update.message.reply_text(bookings, parse_mode='Markdown')
    
    async def subscribe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /subscribe"""
        if not await self._is_staff_member(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        telegram_user = await self._register_telegram_user(update.effective_user)
        if telegram_user:
            await update.message.reply_text("‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è!")
        else:
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ!\n\n"
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.\n"
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
            )
    
    async def unsubscribe_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /unsubscribe"""
        if not await self._is_staff_member(update.effective_user.id):
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
            return
        
        try:
            telegram_user = TelegramUser.objects.get(telegram_id=update.effective_user.id)
            telegram_user.is_active = False
            telegram_user.save()
            await update.message.reply_text("‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
        except TelegramUser.DoesNotExist:
            await update.message.reply_text("‚ùå –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "stats":
            stats = await self._get_booking_stats()
            await query.edit_message_text(stats, parse_mode='Markdown')
        elif query.data == "bookings":
            bookings = await self._get_recent_bookings()
            await query.edit_message_text(bookings, parse_mode='Markdown')
        elif query.data == "help":
            await self.help_command(update, context)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        await update.message.reply_text(
            "–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
    
    async def _is_staff_member(self, telegram_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä—Å–æ–Ω–∞–ª–æ–º"""
        from asgiref.sync import sync_to_async
        
        @sync_to_async
        def check_staff():
            try:
                telegram_user = TelegramUser.objects.get(telegram_id=telegram_id)
                logger.debug(f"Found TelegramUser {telegram_id}, is_staff: {telegram_user.user.is_staff}")
                logger.debug(f"User email: {telegram_user.user.email}")
                return telegram_user.user.is_staff or telegram_user.user.is_superuser
            except TelegramUser.DoesNotExist:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω - –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω
                logger.debug(f"TelegramUser {telegram_id} not found in database")
                return False
        
        return await check_staff()
    
    async def _register_telegram_user(self, telegram_user) -> TelegramUser:
        """–°–æ–∑–¥–∞–µ—Ç –∏–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
        from asgiref.sync import sync_to_async
        
        @sync_to_async
        def create_or_activate_user():
            try:
                # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                tg_user = TelegramUser.objects.get(telegram_id=telegram_user.id)
                logger.debug(f"Activating existing TelegramUser {telegram_user.id}")
                tg_user.is_active = True
                tg_user.save()
                return tg_user
            except TelegramUser.DoesNotExist:
                logger.debug(f"Creating new TelegramUser {telegram_user.id} WITHOUT staff privileges")
                
                logger.debug(f"About to create user with is_staff=False")
                user = User.objects.create(
                    username=f"tg_{telegram_user.id}",
                    email=f"tg_{telegram_user.id}@example.com",
                    first_name=telegram_user.first_name or '',
                    last_name=telegram_user.last_name or '',
                    is_staff=False,  # –Ø–í–ù–û –ù–ï –¥–∞–µ–º –ø—Ä–∞–≤–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞!
                    is_superuser=False,  # –Ø–í–ù–û –ù–ï –¥–∞–µ–º –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
                    is_active=True
                )
                
                logger.debug(f"User created! username={user.username}, is_staff={user.is_staff}, is_superuser={user.is_superuser}")
                
                user_from_db = User.objects.get(id=user.id)
                logger.debug(f"User from DB: username={user_from_db.username}, is_staff={user_from_db.is_staff}, is_superuser={user_from_db.is_superuser}")
                
                tg_user = TelegramUser.objects.create(
                    user=user,
                    telegram_id=telegram_user.id,
                    username=telegram_user.username,
                    first_name=telegram_user.first_name,
                    last_name=telegram_user.last_name,
                    is_active=True
                )
                return tg_user
        
        return await create_or_activate_user()
    
    async def _get_booking_stats(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
        from asgiref.sync import sync_to_async
        
        @sync_to_async
        def get_stats():
            today = datetime.now().date()
            week_ago = today - timedelta(days=7)
            
            total_bookings = Booking.objects.count()
            pending_bookings = Booking.objects.filter(status=BookingStatus.PENDING).count()
            confirmed_bookings = Booking.objects.filter(status=BookingStatus.CONFIRMED).count()
            recent_bookings = Booking.objects.filter(created_at__gte=week_ago).count()
            
            return f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π**

üìÖ **–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**
‚Ä¢ –í—Å–µ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {total_bookings}
‚Ä¢ –û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {pending_bookings}
‚Ä¢ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã: {confirmed_bookings}

üìà **–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:**
‚Ä¢ –ù–æ–≤—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {recent_bookings}

üïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%d.%m.%Y %H:%M')}
            """
        
        return await get_stats()
    
    async def _get_recent_bookings(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
        from asgiref.sync import sync_to_async
        
        @sync_to_async
        def get_bookings():
            recent_bookings = Booking.objects.select_related('user', 'cottage').order_by('-created_at')[:10]
            
            if not recent_bookings:
                return "üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è**\n\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π."
            
            bookings_text = "üìã **–ü–æ—Å–ª–µ–¥–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:**\n\n"
            
            for booking in recent_bookings:
                status_emoji = {
                    BookingStatus.PENDING: "‚è≥",
                    BookingStatus.CONFIRMED: "‚úÖ",
                    BookingStatus.CANCELLED: "‚ùå",
                    BookingStatus.COMPLETED: "üèÅ"
                }.get(booking.status, "‚ùì")
                
                bookings_text += f"""
{status_emoji} **{booking.cottage.name}**
üë§ {booking.user.get_full_name() or booking.user.email}
üìÖ {booking.check_in} - {booking.check_out} ({booking.nights} –Ω–æ—á–µ–π)
üë• {booking.guests} –≥–æ—Å—Ç–µ–π
üí∞ {booking.total_price} ‚ÇΩ
üìù –°—Ç–∞—Ç—É—Å: {booking.get_status_display()}
---
                """
            
            return bookings_text
        
        return await get_bookings()
    
    async def send_booking_notification(self, booking: Booking, notification_type: str = "new"):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        from asgiref.sync import sync_to_async
        
        logger.info(f"Starting notification send: {notification_type}")
        
        @sync_to_async
        def get_active_users():
            users = list(TelegramUser.objects.filter(is_active=True))
            logger.info(f"Found active users: {len(users)}")
            return users
        
        active_users = await get_active_users()
        
        if not active_users:
            logger.warning("No active users for notifications")
            return
        
        if notification_type == "new":
            message = self._format_new_booking_message(booking)
        elif notification_type == "status_change":
            message = self._format_status_change_message(booking)
        elif notification_type == "cancelled":
            message = self._format_cancelled_booking_message(booking)
        else:
            logger.error(f"Unknown notification type: {notification_type}")
            return
        
        logger.debug(f"Message to send:\n{message[:100]}...")
        
        sent_count = 0
        for tg_user in active_users:
            try:
                logger.debug(f"Sending message to user {tg_user.telegram_id}")
                await self.application.bot.send_message(
                    chat_id=tg_user.telegram_id,
                    text=message,
                    parse_mode='Markdown'
                )
                sent_count += 1
                logger.info(f"Message sent to user {tg_user.telegram_id}")
            except Exception as e:
                logger.error(f"Error sending message to user {tg_user.telegram_id}: {e}")
                logger.error(f"Error sending message to user {tg_user.telegram_id}: {e}")
        
        logger.info(f"Sent {sent_count} of {len(active_users)} notifications")
    
    def _format_new_booking_message(self, booking: Booking) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        return f"""
üÜï **–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!**

üë§ **–ö–ª–∏–µ–Ω—Ç:** {booking.user.get_full_name() or booking.user.email}
üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {booking.user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üè† **–ö–æ—Ç—Ç–µ–¥–∂:** {booking.cottage.name}
üìÖ **–î–∞—Ç—ã:** {booking.check_in} - {booking.check_out} ({booking.nights} –Ω–æ—á–µ–π)
üë• **–ì–æ—Å—Ç–∏:** {booking.guests} —á–µ–ª–æ–≤–µ–∫
üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {booking.total_price} ‚ÇΩ
üìù **–ü–æ–∂–µ–ª–∞–Ω–∏—è:** {booking.special_requests or '–ù–µ—Ç'}

‚è∞ **–°–æ–∑–¥–∞–Ω–æ:** {booking.created_at.strftime('%d.%m.%Y %H:%M')}
        """
    
    def _format_status_change_message(self, booking: Booking) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"""
        return f"""
üîÑ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è**

üè† **–ö–æ—Ç—Ç–µ–¥–∂:** {booking.cottage.name}
üë§ **–ö–ª–∏–µ–Ω—Ç:** {booking.user.get_full_name() or booking.user.email}
üìÖ **–î–∞—Ç—ã:** {booking.check_in} - {booking.check_out}

üìù **–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:** {booking.get_status_display()}
        """
    
    def _format_cancelled_booking_message(self, booking: Booking) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –¢–µ–ø–µ—Ä—å –æ–±—ä–µ–∫—Ç —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        cottage_name = getattr(booking.cottage, 'name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ—Ç—Ç–µ–¥–∂')
        user_name = getattr(booking.user, 'get_full_name', lambda: None)() or getattr(booking.user, 'email', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        
        return f"""
‚ùå **–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è**

üè† **–ö–æ—Ç—Ç–µ–¥–∂:** {cottage_name}
üë§ **–ö–ª–∏–µ–Ω—Ç:** {user_name}
üìÖ **–î–∞—Ç—ã:** {booking.check_in} - {booking.check_out}
        """
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        logger.info("Starting Telegram bot...")
        self.application.run_polling()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot_instance = None


def get_bot():
    """–ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    global bot_instance
    if bot_instance is None:
        bot_instance = CottageBookingBot()
    return bot_instance


async def send_callback_notification(callback_request):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–µ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
        active_users = await sync_to_async(list)(
            TelegramUser.objects.filter(
                is_active=True,
                user__is_staff=True
            ).select_related('user')
        )
        
        if not active_users:
            logger.warning("No active staff users found for callback notification")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = _format_callback_message(callback_request)
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
        bot = get_bot()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        sent_count = 0
        for telegram_user in active_users:
            try:
                await bot.application.bot.send_message(
                    chat_id=telegram_user.telegram_id,
                    text=message,
                    parse_mode='HTML'
                )
                sent_count += 1
                logger.info(f"Callback notification sent to user {telegram_user.telegram_id}")
            except Exception as e:
                logger.error(f"Failed to send callback notification to {telegram_user.telegram_id}: {e}")
        
        logger.info(f"Sent {sent_count} callback notifications")
        return sent_count > 0
        
    except Exception as e:
        logger.error(f"Error sending callback notification: {e}")
        return False


def _format_callback_message(callback_request):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞—è–≤–∫–µ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫"""
    cottage_info = ""
    if callback_request.cottage:
        cottage_info = f"\nüè† <b>–ö–æ—Ç—Ç–µ–¥–∂:</b> {callback_request.cottage.name}\nüí∞ <b>–¶–µ–Ω–∞:</b> {callback_request.cottage.price_per_night} ‚ÇΩ/–Ω–æ—á—å"
    
    preferred_time = ""
    if callback_request.preferred_time:
        preferred_time = f"\n‚è∞ <b>–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:</b> {callback_request.preferred_time}"
    
    message = f"""
üîî <b>–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –û–ë–†–ê–¢–ù–´–ô –ó–í–û–ù–û–ö</b>

üë§ <b>–ö–ª–∏–µ–Ω—Ç:</b> {callback_request.full_name}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {callback_request.phone}
üìß <b>Email:</b> {callback_request.email or '–ù–µ —É–∫–∞–∑–∞–Ω'}{cottage_info}{preferred_time}

üí¨ <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>
{callback_request.message or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}

üìÖ <b>–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏:</b> {callback_request.created_at.strftime('%d.%m.%Y %H:%M')}
üÜî <b>ID –∑–∞—è–≤–∫–∏:</b> #{callback_request.id}
"""
    
    return message
