from django.db.models.signals import post_save, post_delete
from django.dispatch import receiver
from apps.bookings.models import Booking, BookingStatus
from .bot import get_bot
import threading

print("TELEGRAM BOT SIGNALS LOADED!")


def send_notification_async(booking, notification_type):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
    def send_in_thread():
        try:
            from apps.telegram_bot.models import TelegramUser
            import requests
            
            # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–∞–≤–∞–º–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞
            active_users = TelegramUser.objects.filter(
                is_active=True,
                user__is_staff=True
            )
            
            if not active_users:
                print("No active staff users for notifications")
                return
            
            print(f"Sending notifications to {len(active_users)} staff users")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            if notification_type == "new":
                message = f"""
üÜï **–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!**

üë§ **–ö–ª–∏–µ–Ω—Ç:** {booking.user.get_full_name() or booking.user.email}
üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {booking.user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üè† **–ö–æ—Ç—Ç–µ–¥–∂:** {booking.cottage.name}
üìÖ **–î–∞—Ç—ã:** {booking.check_in} - {booking.check_out}
üë• **–ì–æ—Å—Ç–µ–π:** {booking.guests}
üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {booking.total_price} ‚ÇΩ
                """
            elif notification_type == "cancelled":
                message = f"""
‚ùå **–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è**

üè† **–ö–æ—Ç—Ç–µ–¥–∂:** {booking.cottage.name}
üë§ **–ö–ª–∏–µ–Ω—Ç:** {booking.user.get_full_name() or booking.user.email}
üìÖ **–î–∞—Ç—ã:** {booking.check_in} - {booking.check_out}
                """
            else:
                message = f"""
üîÑ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è**

üè† **–ö–æ—Ç—Ç–µ–¥–∂:** {booking.cottage.name}
üë§ **–ö–ª–∏–µ–Ω—Ç:** {booking.user.get_full_name() or booking.user.email}
üìÖ **–î–∞—Ç—ã:** {booking.check_in} - {booking.check_out}
üìù **–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:** {booking.get_status_display()}
                """
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            import concurrent.futures
            
            def send_to_user(tg_user):
                try:
                    url = ("https://api.telegram.org/bot8454218978:"
                           "AAFLi7J5C-T5KDxla0fJ278Ohst9qfO2t0Q/sendMessage")
                    data = {
                        'chat_id': tg_user.telegram_id,
                        'text': message,
                        'parse_mode': 'Markdown'
                    }
                    
                    response = requests.post(url, data=data, timeout=10)
                    if response.status_code == 200:
                        print(f"Message sent to user {tg_user.telegram_id}")
                        return True
                    else:
                        print(f"Error sending message to user "
                              f"{tg_user.telegram_id}: {response.text}")
                        return False
                        
                except Exception as e:
                    print(f"Error sending message to user "
                          f"{tg_user.telegram_id}: {e}")
                    return False
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º ThreadPoolExecutor –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:
                futures = [executor.submit(send_to_user, tg_user) 
                          for tg_user in active_users]
                sent_count = sum(1 for future in 
                                concurrent.futures.as_completed(futures) 
                                if future.result())
            
            print(f"Sent {sent_count} of {len(active_users)} notifications")
            
        except Exception as e:
            print(f"Error in async notification: {e}")
            import traceback
            traceback.print_exc()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    thread = threading.Thread(target=send_in_thread)
    thread.daemon = True
    thread.start()


@receiver(post_save, sender=Booking)
def booking_created_or_updated(sender, instance, created, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –û—Ç–∫–ª—é—á–µ–Ω–æ: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ Celery –≤ apps/bookings/signals.py
    return
    # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    if hasattr(instance, '_notification_sent'):
        return
    
    print("=" * 50)
    print("SIGNAL FUNCTION CALLED!")
    print("=" * 50)
    try:
        print("=" * 50)
        print(f"SIGNAL TRIGGERED! Booking {instance.id}")
        print(f"Created: {created}")
        print(f"Status: {instance.status}")
        print(f"BookingStatus.CANCELLED = {BookingStatus.CANCELLED}")
        print(f"Status comparison: {instance.status} == "
              f"{BookingStatus.CANCELLED} = "
              f"{instance.status == BookingStatus.CANCELLED}")
        print("=" * 50)
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –æ–±—ä–µ–∫—Ç —Å —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        try:
            booking = Booking.objects.select_related(
                'user', 'cottage').get(id=instance.id)
        except Booking.DoesNotExist:
            print(f"Booking {instance.id} not found, skipping notification")
            return
        
        # –ü–æ–º–µ—á–∞–µ–º —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
        instance._notification_sent = True
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¢–û–õ–¨–ö–û —á–µ—Ä–µ–∑ —ç—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥—Ä—É–≥–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã)
        if created:
            print(f"Sending new booking notification: {booking.id}")
            send_notification_async(booking, "new")
        elif booking.status == BookingStatus.CANCELLED:
            print(f"Sending cancellation notification: {booking.id}")
            send_notification_async(booking, "cancelled")
        else:
            print(f"Sending status change notification: {booking.id}")
            send_notification_async(booking, "status_change")
    except Exception as e:
        print(f"Error sending notification: {e}")
        import traceback
        traceback.print_exc()


@receiver(post_delete, sender=Booking)
def booking_deleted(sender, instance, **kwargs):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –û—Ç–∫–ª—é—á–µ–Ω–æ: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —á–µ—Ä–µ–∑ Celery –≤ apps/bookings/signals.py
    return
