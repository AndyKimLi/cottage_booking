"""
Celery –∑–∞–¥–∞—á–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
"""
from celery import shared_task
from django.core.mail import send_mail
from django.template.loader import render_to_string
from django.conf import settings
import requests
import logging

logger = logging.getLogger(__name__)


@shared_task(bind=True, max_retries=3)
def send_telegram_notification(self, booking_id, notification_type):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
    """
    try:
        from apps.bookings.models import Booking
        from apps.telegram_bot.models import TelegramUser
        
        # –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        booking = Booking.objects.select_related('user', 'cottage').get(id=booking_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        active_users = TelegramUser.objects.filter(
            is_active=True,
            user__is_staff=True
        )
        
        if not active_users:
            logger.warning("No active staff users for notifications")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if notification_type == "new":
            message = f"""
üÜï **–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ!**

üë§ **–ö–ª–∏–µ–Ω—Ç:** {booking.user.get_full_name() or booking.user.email}
üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {booking.user.phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}
üè† **–ö–æ—Ç—Ç–µ–¥–∂:** {booking.cottage.name}
üìÖ **–î–∞—Ç—ã:** {booking.check_in} - {booking.check_out}
üë• **–ì–æ—Å—Ç–µ–π:** {booking.guests}
üí∞ **–°—Ç–æ–∏–º–æ—Å—Ç—å:** {booking.total_price} ‚ÇΩ
            """
        elif notification_type == "cancelled":
            message = f"""
‚ùå **–û—Ç–º–µ–Ω–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è**

üè† **–ö–æ—Ç—Ç–µ–¥–∂:** {booking.cottage.name}
üë§ **–ö–ª–∏–µ–Ω—Ç:** {booking.user.get_full_name() or booking.user.email}
üìÖ **–î–∞—Ç—ã:** {booking.check_in} - {booking.check_out}
            """
        else:  # status_change
            message = f"""
üîÑ **–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è**

üè† **–ö–æ—Ç—Ç–µ–¥–∂:** {booking.cottage.name}
üë§ **–ö–ª–∏–µ–Ω—Ç:** {booking.user.get_full_name() or booking.user.email}
üìÖ **–î–∞—Ç—ã:** {booking.check_in} - {booking.check_out}
üìù **–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:** {booking.get_status_display()}
            """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        sent_count = 0
        for tg_user in active_users:
            try:
                url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
                data = {
                    'chat_id': tg_user.telegram_id,
                    'text': message,
                    'parse_mode': 'Markdown'
                }
                
                response = requests.post(url, data=data, timeout=10)
                if response.status_code == 200:
                    sent_count += 1
                    logger.info(f"Message sent to user {tg_user.telegram_id}")
                else:
                    logger.error(f"Error sending message to user {tg_user.telegram_id}: {response.text}")
                    
            except Exception as e:
                logger.error(f"Error sending message to user {tg_user.telegram_id}: {e}")
        
        logger.info(f"Sent {sent_count} of {len(active_users)} notifications")
        return sent_count > 0
        
    except Exception as e:
        logger.error(f"Error in send_telegram_notification: {e}")
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        raise self.retry(countdown=60, exc=e)


@shared_task(bind=True, max_retries=3)
def send_email_notification(self, booking_id, notification_type):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    """
    try:
        from apps.bookings.models import Booking
        
        # –ü–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
        booking = Booking.objects.select_related('user', 'cottage').get(id=booking_id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º email –∞–¥—Ä–µ—Å
        email_address = booking.email_address
        if not email_address:
            logger.warning(f"Booking {booking_id} has no email address")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if notification_type == "confirmed":
            subject = f'üéâ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ - {booking.cottage.name}'
            template = 'emails/booking_confirmed.html'
        elif notification_type == "cancelled":
            subject = f'‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ - {booking.cottage.name}'
            template = 'emails/booking_cancelled.html'
        else:  # status_change
            subject = f'üîÑ –°—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω - {booking.cottage.name}'
            template = 'emails/booking_status_changed.html'
        
        # –†–µ–Ω–¥–µ—Ä–∏–º HTML —à–∞–±–ª–æ–Ω
        context = {
            'booking': booking,
            'user': booking.user,
            'cottage': booking.cottage,
        }
        
        html_content = render_to_string(template, context)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
        send_mail(
            subject=subject,
            message=html_content,
            from_email=settings.DEFAULT_FROM_EMAIL,
            recipient_list=[email_address],
            html_message=html_content,
            fail_silently=False,
        )
        
        logger.info(f"Email notification sent to {email_address} for booking {booking_id}")
        return True
        
    except Exception as e:
        logger.error(f"Error in send_email_notification: {e}")
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        raise self.retry(countdown=60, exc=e)


@shared_task(bind=True, max_retries=3)
def send_callback_request_notification(self, callback_id):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞—è–≤–∫–µ –Ω–∞ –∑–≤–æ–Ω–æ–∫ –≤ Telegram
    """
    try:
        from apps.leads.models import CallbackRequest
        from apps.telegram_bot.models import TelegramUser
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫—É
        callback = CallbackRequest.objects.select_related('cottage').get(id=callback_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        active_users = TelegramUser.objects.filter(
            is_active=True,
            user__is_staff=True
        )
        
        if not active_users:
            logger.warning("No active staff users for callback notifications")
            return False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"""
üìû **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫!**

üë§ **–ö–ª–∏–µ–Ω—Ç:** {callback.full_name}
üìû **–¢–µ–ª–µ—Ñ–æ–Ω:** {callback.phone}
üìß **Email:** {callback.email}
üè† **–ö–æ—Ç—Ç–µ–¥–∂:** {callback.cottage.name if callback.cottage else '–ù–µ —É–∫–∞–∑–∞–Ω'}
üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ:** {callback.message}

üîó **–°—Å—ã–ª–∫–∞:** [–û—Ç–∫—Ä—ã—Ç—å –≤ –∞–¥–º–∏–Ω–∫–µ](http://localhost:8000/admin/leads/callbackrequest/{callback.id}/)
        """
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
        sent_count = 0
        for tg_user in active_users:
            try:
                url = f"https://api.telegram.org/bot{settings.TELEGRAM_BOT_TOKEN}/sendMessage"
                data = {
                    'chat_id': tg_user.telegram_id,
                    'text': message,
                    'parse_mode': 'Markdown'
                }
                
                response = requests.post(url, data=data, timeout=10)
                if response.status_code == 200:
                    sent_count += 1
                    logger.info(f"Callback notification sent to user {tg_user.telegram_id}")
                else:
                    logger.error(f"Error sending callback notification to user {tg_user.telegram_id}: {response.text}")
                    
            except Exception as e:
                logger.error(f"Error sending callback notification to user {tg_user.telegram_id}: {e}")
        
        logger.info(f"Sent {sent_count} of {len(active_users)} callback notifications")
        return sent_count > 0
        
    except Exception as e:
        logger.error(f"Error in send_callback_request_notification: {e}")
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–¥–∞—á—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        raise self.retry(countdown=60, exc=e)
