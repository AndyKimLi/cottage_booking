version: '3.8'

services:
  db:
    image: postgres:15
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_DB: cottage_booking
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: password
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  web:
    build: .
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
      - rabbitmq
    environment:
      - DEBUG=1
      - DB_HOST=db
      - DB_NAME=cottage_booking
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=amqp://admin:password@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./static:/app/static
      - ./media:/app/media
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    depends_on:
      - web

  celery:
    build: .
    command: celery -A cottage_booking worker -l info
    volumes:
      - .:/app
    depends_on:
      - db
      - redis
      - rabbitmq
    environment:
      - DEBUG=1
      - DB_HOST=db
      - DB_NAME=cottage_booking
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=amqp://admin:password@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}

  telegram_bot:
    build: .
    command: python manage.py run_telegram_bot
    volumes:
      - .:/app
    depends_on:
      - db
      - redis
      - rabbitmq
    environment:
      - DEBUG=1
      - DB_HOST=db
      - DB_NAME=cottage_booking
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_PORT=5432
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=amqp://admin:password@rabbitmq:5672//
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}

  backup:
    image: postgres:15
    volumes:
      - ./backups:/backups
      - postgres_data:/var/lib/postgresql/data
    environment:
      - PGPASSWORD=password
    command: >
      sh -c "
      while true; do
        echo 'üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...'
        BACKUP_FILE=/backups/backup_$$(date +%Y%m%d_%H%M%S).sql
        pg_dump -h db -U postgres -d cottage_booking > $$BACKUP_FILE
        
        if [ $$? -eq 0 ]; then
          echo '‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞: '$$BACKUP_FILE
          
          # –°–∂–∏–º–∞–µ–º —Ñ–∞–π–ª
          gzip $$BACKUP_FILE
          echo 'üì¶ –§–∞–π–ª —Å–∂–∞—Ç: '$$BACKUP_FILE'.gz'
          
          # –†–æ—Ç–∞—Ü–∏—è –±—ç–∫–∞–ø–æ–≤ - –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
          echo 'üóëÔ∏è  –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤...'
          find /backups -name 'backup_*.sql.gz' -mtime +7 -delete
          
          # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤
          BACKUP_COUNT=$$(ls /backups/backup_*.sql.gz 2>/dev/null | wc -l)
          echo 'üìä –í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤: '$$BACKUP_COUNT
        else
          echo '‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏!'
        fi
        
        echo '‚è∞ –°–ª–µ–¥—É—é—â–∏–π –±—ç–∫–∞–ø —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞...'
        sleep 86400
      done
      "
    depends_on:
      - db

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./config/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/monitoring/grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus

  loki:
    image: grafana/loki:latest
    ports:
      - "3100:3100"
    volumes:
      - ./config/monitoring/loki.yml:/etc/loki/local-config.yaml
    command: -config.file=/etc/loki/local-config.yaml

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./logs:/var/log
      - ./config/monitoring/promtail.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki

  alertmanager:
    image: prom/alertmanager:latest
    ports:
      - "9093:9093"
    volumes:
      - ./config/monitoring/alertmanager.yml:/etc/alertmanager/alertmanager.yml
      - alertmanager_data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:
  prometheus_data:
  grafana_data:
  alertmanager_data:
